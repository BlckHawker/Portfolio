{
    "ProjectIdeas": [
        {
            "Title": "Mentor Schedule Maker",
            "Description": "At my time at RIT, I joined the <a href=\"https://sse.rit.edu\" target=\"_blank\">Society of Software Engineers</a>. It's an academic organization that mainly focused on mentoring (tutoring) students who are majoring in Software Engineering related field. The \"Mentor Head\" would be responsible for making the schedule of which mentor(s) would be assigned each shift based on their availability. Since the Mentor Head has many other responsibilities, I thought it would be a good idea to alleviate one of those problems with a schedule generator. Given the name and availability of each mentor, the software would generate all possible schedules, verifying that nobody is overworked."
        },
        {
            "Title": "KTANE FAQ Bot",
            "Description": "As someone who spends a lot of time in the <a href=\"https://discord.gg/ktane-160061833166716928\" target=\"_blank\">Keep Talking and Nobody Explodes (KTANE)</a> server, I tend to answer the same questions multiple time as new people decide to mod the game. Although I am happy to answer their question, it can be repetitive and time consuming, especially if the person does not have a lot of programming/Unity knowledge.\nThe server does have a channel that resembles a FAQ forum, though it can be difficult to navigate through when you're looking for a specific question. I plan for this bot to be an improvement of the FAQ channel by having questions to be grouped by their similarity. For example, one section could be about mod making in unity while another one can be about manual making with HTML. The collections of questions can be navigated through reactions. Since the bot will be in the official discord server, it should have a better chance of being used as opposed to various tutorials that are scattered on YouTube."
        },
        {
            "Title": "Q Learning Rubik's Cube",
            "Description": "I was always mesmerized with Rubik's Cubes. When I finally learned an algorithm that guarantees the cube would be solved, I felt a great wave of pride. Although I never had the time to get into the hobby myself, I enjoy watching competitive cubing. I find the idea of memorizing patterns in order to optimize the solving process fascinating. A few years later, I took a class that focused on the use AI in games. We learned about neural networking and Q learning (a machine learning algorithm where the machine iteratively learns how to solve something and improves over time). I figured a rubik's cube would be a great puzzle to understand the algorithm more."
        },
        {
            "Title": "Rock Paper Scissors Boids",
            "Description": "At RIT, I took a class that taught me how to use Unity, mainly scripting. One of the projects I was assigned was to create a project use boids (artificial intelligence to simulate free will of objects, mainly through movement). The theme of my project, at the time, was Human vs Zombies (a large game of tag where the zombies are it). The humans' only job was to run away, while the zombies' job was to chase the humans. There was nothing for the \"player\" to do besides watch the simulation run.\nI have the idea of changing the theme to Rock Paper Scissors where each boids would run away and chase each target. When a collision happens, a boid will change to another team. For example, rocks colliding to paper will turn into paper. I am planning to add sliders that will change the stats of each boids including but not limited to: movement speed, the radius of their vision, how much they prefer chasing something rather than running away, etc. The player will also have the option to place obstacles anywhere on the map that all boids will need to avoid in order to not get deleted."
        },
        {
            "Title": "Dynamic Binary Puzzle Solver",
            "Description": "I created a <a href=\"https://www.puzzle-binairo.com\" target=\"_blank\">Binary Puzzle (also known as Binario)</a> solver during my <a href=\"/portfolio/projects-ktane.html\" target=\"_blank\">KTANE solver saga</a>. The KTANE version always generated a 6x6 puzzle, but I have recently started solving some with a larger size. I want to challenge myself by making a solver where the dimensions are not constant. This will force me to think about what rules work for one size and not for others and apply them in the appropriate context."
        },
        {
            "Title": "Budget Tracker",
            "Description": "I like my life to be organized, and technology has made that job easier. This applies to budgeting apps including a wishlist function. However, a big task like this can be done in several ways, and I never found an app that exactly fits my preferences; not to mention one that is free without some form of restriction.\nI want to be able to have items sectioned into categories (Needs, Wants, Savings, etc). These categories can then either have items or more subcategories, making a tree structure with a limited depth. The user will have the option of depositing or withdrawing money to/from a certain item/category along with notes. I'm planning on having depositing be customizable where the user has the option of automatically giving a certain category a percentage of the deposit. Or have a priority system where all the money goes into a certain category until the \"goal amount\" is reached. Then all deposited money will go into the next category. I also want each category to have its own stats section where users can see what they're spending most of their money on."
        },
        {
            "Title": "Sudoku Solver",
            "Description": "I have learned to do Sudoku puzzles at a very young age. However, I never found myself finishing most of them. I found myself being very slow at deducing what the number of each cell was as I needed to slowly look at the respective row, column, and block. I always wondered if there were more sophisticated deductions, and I think making a solver will aid me in answering that question."
        },
        {
            "Title": "1 Player Ultimate Tic Tac Toe",
            "Description": "In 2022, I made <a href=\"/portfolio/projects.html\" target=\"_blank\">Ultimate Tic Tac Toe</a> where one cell of the game is its own version of tic tac toe. I made it two players as it was a school project and I was pressed for time. I always wanted to make it a single-player game to challenge my skills of creating AI that replicates playing against a real person.\nI have thought of using different algorithms to achieve this goal and have different levels of difficulty. I thinking of having \"Easy\" perform random moves and harder difficulties using mini-maxing with different parameters."
        },
        {
            "Title":"Tiny Tower Full Stack Project",
            "Description": "<a href=\"https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjVwMSyhYCJAxXIEmIAHdKYEm0QFnoECEwQAQ&url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.nimblebit.tinytower%26hl%3Den_US&usg=AOvVaw35Dk94k17LXpVm4iseGFsP&opi=89978449\" target=\"_blank\">Tiny Tower</a> is an idle mobile game where the user is a manager of a multi-purpose tower. Each floor of the tower either sells products, or are resident floors for employees of the product floors. Each employee has stats that affect how well they do their job on certain floors. I've been playing this game on and off for over a decade. Throughout that time, I have thought of creating a \"solver\" that would tell the user the best optimization of floors to buy and where to hire people. Although I still like this idea and plan to implement it, it's too opened minded as there are a lot of factors in play. It would be better to create a simulation of the game where the user can easily put their data in first, and then start working on an optimization.\nI could make the simulation a Windows Form GUI the same way I did for my <a href=\"/portfolio/projects-ktane.html\" target=\"_blank\">KTANE Solver</a> project, but that seems too easy (and not that pretty). I want this project to challenge my front-end UI/UX skills in order to get the desired information from the user. I would also like to create a backend using a database like Postgres in order to hold said information."
        },
        {
            "Title": "Papyrus Tiles: Yellow Tiles + Breadth First Search Path Finder",
            "Description": "\"Papyrus Tiles\" is one of my <a href=\"/portfolio/projects-ktane.html\" target=\"_blank\">KTANE mods</a> that resembles the tile puzzle from <a href=\"https://undertale.com\" target=\"_blank\">Undertale</a>. Each tile affects the player in a neutral or negative way, with the latter causing a stirke. The goal is to reach the other side of the grid without getting a strike. I implemented all of the tile colors with the exception of the yellow one where the user will be zapped and forced to move back on the last tile they stepped on causing a strike. It was not initially implemented due to time constraints, but it's definitely something not difficult with my current set of skills.\nAnother feature I've been wanting to improve on is the pathfinder for verifying a puzzle is solvable. The current version of the mod uses recursion to find a path, but it's not reliable as it doesn't guarantee the shortest path. I also noticed it can get stuck in infinite loops at times. Breadth first search is definitely a better algorithm to use in this context."
        }
    ]
}